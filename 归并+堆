1. 多个输入的数组进行排序，输出一个排好序的大数组

答. //评测题目: 无
//假设有多个输入数组，如何合并所有结果并按顺序输出一个有序数组？
//例子：
//输入0: [-1]
//输入1: [1,3,5,5,6,8]
//输入2: [1,9]
//输入3: [11,15,17]
//输入4: [1,16]

//输出： [1,1,1,3,5,5,6,8,9,15,16,17]
// 定义：
// M 数组的个数   N是数组的平均长度


public class Merge {

    static class Entry implements Comparable<Entry>{
        int index;
        int data;
        int subIndex;

        public Entry(int index, int data, int subIndex){
            this.index = index;
            this.data = data;
            this.subIndex = subIndex;
        }

        public int compareTo(Entry other) {
            return this.data - other.data;
        }
    }

    public static void main(String[] args) {
        int[] a = new int[] {-1};
        int[] b = new int[] {1,3,5,5,6,8};
        int[] c = new int[] {1,9};
        int[] d = new int[] {11,15,17};
        int[] e = new int[] {1,16};

        System.out.println(margeSort(a,b,c,d,e));
    }

    public static List<Integer> margeSort(int[]... arrays){
        List<Integer> res = new ArrayList<>();
        PriorityQueue<Entry> q = new PriorityQueue<>();

        for(int i = 0; i < arrays.length; i++) {
            int [] each = arrays[i];
            Entry obj = new Entry(i, each[0], 0);
            q.offer(obj);
        }

        while(q.size() != 0) {
            Entry each = q.poll();
            res.add(each.data);
            int index = each.index;
            int subIndex = each.subIndex;
            if(subIndex == arrays[index].length - 1){
                continue;
            }else{
                int value = arrays[index][subIndex+1];
                Entry obj = new Entry(index, value, subIndex+1);
                q.offer(obj);
            }
        }
        return res;
    }
}
